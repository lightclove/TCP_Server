# -*- coding: utf-8 -*-
#!/usr/bin/env python2
'''
Использует сокеты для обмена данными между заданиями: запускает потоки
выполнения, взаимодействующие с помощью сокетов; независимые программы также
могут использовать сокеты для взаимодействий, потому что они принадлежат
системе в целом, как и именованные каналы; некоторым серверам может
потребоваться взаимодействовать через сокеты с клиентами в виде потоков
выполнения и процессов; данные через сокеты передаются в виде строк байтов, но
точно так же через них можно передавать сериализованные объекты или кодированный
текст Юникода;
ВНИМАНИЕ: при обращении к функции print в потоках выполнения может потребоваться
синхронизировать их, если есть вероятность перекрытия по времени;
'''
# переносимый API сокетов
from socket import socket, AF_INET, SOCK_STREAM
# номер порта, идентифицирующий сокет
port = 50008
# сервер и клиент выполняются на локальном компьютере
host = 'localhost'

def server():
    # IP-адрес TCP-соединения
    sock = socket(AF_INET, SOCK_STREAM)
    # подключить к порту на этой машине
    sock.bind(('', port))
    # до 5 ожидающих клиентов
    sock.listen(5)
    while True:
        # ждать соединения с клиентом
        conn, addr = sock.accept()
        # прочитать байты данных от клиента
        data = conn.recv(1024)
        # conn - новый подключенный сокет
        reply = 'Response from server: [%s]' % data
        # отправить байты данных клиенту
        conn.send(reply.encode())

def client(name):
    sock = socket(AF_INET, SOCK_STREAM)
    # подключить сокет к порту
    sock.connect((host, port))
    # отправить байты данных серверу
    sock.send(name.encode())
    # принять байты данных от сервера
    reply = sock.recv(1024)
    # до 1024 байтов в сообщении
    sock.close()
    print('Client got reply: [%s]' % reply)

if __name__ == '__main__':
    from threading import Thread

    sthread = Thread(target=server)
    # не ждать завершения потока сервера
    #sthread.daemon = True
    # ждать завершения дочерних потоков
    sthread.start()

    for i in range(15):
        Thread(target=client, args=('client%s' % i,)).start()